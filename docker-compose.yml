version: '3.8'

services:
  # ===== 데이터베이스 =====
  postgres:
    image: postgres:14-alpine
    container_name: property-postgres
    environment:
      POSTGRES_DB: property_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret123}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - property-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:5
    container_name: property-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secret123}
      MONGO_INITDB_DATABASE: property_raw
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - property-net

  redis:
    image: redis:7-alpine
    container_name: property-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secret123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - property-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== MCP 오케스트레이터 =====
  orchestrator:
    build:
      context: .
      dockerfile: docker/Dockerfile.orchestrator
    container_name: mcp-orchestrator
    environment:
      - ENV=production
      - DB_HOST=postgres
      - DB_PASSWORD=${DB_PASSWORD:-secret123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secret123}
      - MONGO_HOST=mongodb
      - MONGO_PASSWORD=${MONGO_PASSWORD:-secret123}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped

  # ===== 수집 에이전트들 =====
  collector-naver:
    build:
      context: .
      dockerfile: docker/Dockerfile.collector
    container_name: collector-naver
    environment:
      - PLATFORM=naver
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=collector
      - MAX_WORKERS=3
    depends_on:
      - orchestrator
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 2
    restart: unless-stopped

  collector-zigbang:
    build:
      context: .
      dockerfile: docker/Dockerfile.collector
    container_name: collector-zigbang
    environment:
      - PLATFORM=zigbang
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=collector
      - MAX_WORKERS=2
    depends_on:
      - orchestrator
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  collector-dabang:
    build:
      context: .
      dockerfile: docker/Dockerfile.collector
    container_name: collector-dabang
    environment:
      - PLATFORM=dabang
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=collector
      - MAX_WORKERS=2
    depends_on:
      - orchestrator
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # ===== 처리 에이전트들 =====
  processor-normalizer:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    container_name: processor-normalizer
    environment:
      - PROCESSOR_TYPE=normalizer
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=processor
    depends_on:
      - orchestrator
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  processor-deduplicator:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    container_name: processor-deduplicator
    environment:
      - PROCESSOR_TYPE=deduplicator
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=processor
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secret123}
    depends_on:
      - orchestrator
      - redis
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # ===== 저장 에이전트 =====
  storage-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.storage
    container_name: storage-agent
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - AGENT_TYPE=storage
      - DB_HOST=postgres
      - DB_PASSWORD=${DB_PASSWORD:-secret123}
      - MONGO_HOST=mongodb
      - MONGO_PASSWORD=${MONGO_PASSWORD:-secret123}
    depends_on:
      - orchestrator
      - postgres
      - mongodb
    networks:
      - property-net
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped

  # ===== API 게이트웨이 =====
  nginx:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - orchestrator
    networks:
      - property-net
    restart: unless-stopped

  # ===== 모니터링 =====
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - property-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - property-net
    restart: unless-stopped

  # ===== 로그 수집 =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - property-net
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - property-net
    restart: unless-stopped

  # ===== 메시지 큐 =====
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-secret123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - property-net
    restart: unless-stopped

volumes:
  postgres-data:
  mongo-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  rabbitmq-data:

networks:
  property-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16